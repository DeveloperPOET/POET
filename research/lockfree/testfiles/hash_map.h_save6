#include "TATAS.h"
#include <vector>
#include <queue>
#include <cstring>

#include <pthread.h>
#include <stdlib.h>
#include <utility>
template <class key_type,class data_type>
class hash_entry  
  {
    public:
    hash_entry<key_type,data_type>* next;
    key_type key;
    std::pair<key_type,data_type> value;
  };
template <class key_type,class data_type>
class hash_map  
  {
    hash_entry<key_type,data_type>** table;
    ;
    struct hash_map_synobj{
      size_t hash_length;
      ;void insert_mod(hash_entry<key_type,data_type>*** m_table, hash_entry<key_type,data_type>** m_table_old, hash_entry<key_type,data_type>* m_table_new)
      {
        struct ModifyLog tmp;
        tmp.m_table = m_table;
        tmp.m_table_new = m_table_new;
        tmp.m_table_old = m_table_old;
        std::vector<struct ModifyLog> * cur = modlog.load();
        cur->push_back(tmp);
      }
      void insert_mod(hash_entry<key_type,data_type>*** m_table, hash_entry<key_type,data_type>** m_table_old, hash_entry<key_type,data_type>* m_table_new, std::unordered_map<hash_entry<key_type,data_type>***,hash_entry<key_type,data_type>*>*private_table)
      {
        struct ModifyLog tmp;
        tmp.m_table = m_table;
        tmp.m_table_new = m_table_new;
        tmp.m_table_old = m_table_old;
        (*private_table)[m_table] = m_table_new;
        std::vector<struct ModifyLog> * cur = modlog.load();
        cur->push_back(tmp);
      }
      ;
      ;
    };
    std::atomic <struct hash_map_synobj*> state;
    inline hash_entry<key_type,data_type>* read_wrapper(hash_entry<key_type,data_type>** &param, std::unordered_map<hash_entry<key_type,data_type>***,hash_entry<key_type,data_type>*>* private_table)
    {
        typename std::unordered_map<hash_entry<key_type,data_type>***,hash_entry<key_type,data_type>*>::iterator res = private_table->find(&param);
        if (res != private_table->end()) return res->second;
        return (param?(*param):0);
    }
    inline hash_entry<key_type,data_type>* read_wrapper(hash_entry<key_type,data_type>** param)
    {
        return (param?(*param):0);
    }
    inline hash_entry<key_type,data_type>*& write_wrapper(hash_entry<key_type,data_type>** &param)
    {
        if (!param) {
            param = new hash_entry<key_type,data_type>* (0);
        }
        return *param;
    }
    ;
    public:
    typedef std::pair<key_type,data_type> value_type;
    size_t bucket(int k) {
       struct hash_map_synobj* __res;
       int __ret__2=0;
       while(true)
       {
        try {
         __res=state.load();
         __ret__2 = k%__res->hash_length;
         break;
        } catch(...){}
       }
       return __ret__2;
    }
    hash_entry<key_type,data_type>* search(int k) {
       struct hash_map_synobj* oldstate;
       struct hash_map_synobj* newstate;
       int index=0;
       hash_entry<key_type,data_type>* p=(hash_entry<key_type,data_type>*)(-1);
       hash_entry<key_type,data_type>* __ret__4=(hash_entry<key_type,data_type>*)(-1);
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct hash_map_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct hash_map_synobj();
       }
       newstate->reclaim_wrapper();
       std::unordered_map<hash_entry<key_type,data_type>***,hash_entry<key_type,data_type>*> private_table;
       while (true) 
       {
        try{
         private_table.clear();
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         index = k%newstate->hash_length;
         p = read_wrapper(table[index], &private_table);
         __ret__4 = p;
         while (p)
           {
              if (p->key==k)
                {
                   break;
                }
              p = read_wrapper(p->next, &private_table);
           }
         ;
        } catch(...){}
       }
       return __ret__4;
    }
    hash_entry<key_type,data_type>* insert(value_type v) {
       struct hash_map_synobj* oldstate;
       struct hash_map_synobj* newstate;
       hash_entry<key_type,data_type>* __ret__5=(hash_entry<key_type,data_type>*)(-1);
       int index=0;
       int _b4_k=v.first;
       hash_entry<key_type,data_type>* p=(hash_entry<key_type,data_type>*)(-1);
       hash_entry<key_type,data_type>* __ret__6=(hash_entry<key_type,data_type>*)(-1);
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct hash_map_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct hash_map_synobj();
       }
       newstate->reclaim_wrapper();
       std::unordered_map<hash_entry<key_type,data_type>***,hash_entry<key_type,data_type>*> private_table;
       while (true) 
       {
        try{
         private_table.clear();
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         hash_entry<key_type,data_type>* table_index_copy=0;
         index = _b4_k%newstate->hash_length;
         p = read_wrapper(table[index], &private_table);
         __ret__6 = __ret__5;
         while (p&&__ret__5==(hash_entry<key_type,data_type>*)(-1))
           {
              if(!p) throw "NullPtrExcpt";
              if (p->key==v.first)
                {
                   __ret__5 = NULL;
                }
              if (__ret__5!=NULL)
                {
                   p = read_wrapper(p->next, &private_table);
                }
           }
         if (__ret__5!=NULL)
           {
              p = new hash_entry<key_type,data_type> ();
              if(!p) throw "NullPtrExcpt";
              p->key = v.first;
              p->value = v;
              write_wrapper(p->next) = read_wrapper(table[index], &private_table);
              table_index_copy = p;
              newstate->insert_mod(&(table[index]),table[index],table_index_copy,&private_table);
              __ret__5 = p;
           }
         ;
        } catch(...){}
       }
       return __ret__6;
    }
    int erase(int k) {
       struct hash_map_synobj* oldstate;
       struct hash_map_synobj* newstate;
       size_t n=0;
       size_t index=0;
       hash_entry<key_type,data_type>* prev;
       hash_entry<key_type,data_type>* curr=(hash_entry<key_type,data_type>*)(-1);
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct hash_map_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct hash_map_synobj();
       }
       newstate->reclaim_wrapper();
       std::unordered_map<hash_entry<key_type,data_type>***,hash_entry<key_type,data_type>*> private_table;
       while (true) 
       {
        try{
         private_table.clear();
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         hash_entry<key_type,data_type>* table_index_copy=0;
         hash_entry<key_type,data_type>* prev_next_copy=0;
         index = k%newstate->hash_length;
         curr = read_wrapper(table[index], &private_table);
         prev = curr;
         while (curr)
           {
              if (curr->key==k)
                {
                   n++;
                   if (curr==read_wrapper(table[index], &private_table))
                     {
                        table_index_copy = read_wrapper(curr->next, &private_table);
                        newstate->insert_mod(&(table[index]),table[index],table_index_copy,&private_table);
                        
                        curr = prev = table_index_copy;
                     }
                   else 
                     {
                        prev_next_copy = read_wrapper(curr->next, &private_table);
                        if(!prev) throw "NullPtrExcpt";
                        newstate->insert_mod(&(prev->next),prev->next,prev_next_copy,&private_table);
                        
                        curr = prev_next_copy;
                     }
                }
              else 
                {
                   prev = curr;
                   curr = read_wrapper(curr->next, &private_table);
                }
           }
         ;
        } catch(...){}
       }
       return n;
    }
    bool empty() {
       struct hash_map_synobj* oldstate;
       struct hash_map_synobj* newstate;
       int i;
       bool res=true;
       hash_entry<key_type,data_type>* e;
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct hash_map_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct hash_map_synobj();
       }
       newstate->reclaim_wrapper();
       std::unordered_map<hash_entry<key_type,data_type>***,hash_entry<key_type,data_type>*> private_table;
       while (true) 
       {
        try{
         private_table.clear();
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         for (i=0; i<newstate->hash_length; i+=1)
           {
              if (read_wrapper(table[i], &private_table)!=NULL)
                {
                   e = read_wrapper(table[i], &private_table);
                   res = false;
                }
           }
         ;
        } catch(...){}
       }
       return res;
    }
    public:
    hash_map (int init_hash_length)  {
       struct hash_map_synobj* state_tmp=new hash_map_synobj ();
       state_tmp->hash_length = init_hash_length;
       table = (hash_entry<key_type,data_type>***)calloc(init_hash_length,sizeof(hash_entry<key_type,data_type>**));
       if (table==NULL)
         {
            printf("ERROR: hash_map calloc failure \n");
            exit(0);
         }
       state = state_tmp;
       thread_count = 0;
       for (int i = 0; i < 1000; i++) {
           synobj_lists[i] = 0;
           synobj_list_ids[i] = 0;
           occupied_synobj_array[i] = 0;
           local_idx_array[i] = 0;
       }
    }
    ;
    ~hash_map() {
       free(table);
    }
    ;
  };
