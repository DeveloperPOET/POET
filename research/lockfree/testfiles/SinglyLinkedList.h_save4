#include "TATAS.h"
#include <vector>
#include <queue>
#include <cstring>

#ifndef SINGLY_LINKED_LIST_H
#define SINGLY_LINKED_LIST_H
template <class T>
class SinglyLinkedListWrap  
  ;
template <class T>
class SinglyLinkedEntryWrap  
  {
    T o;
    SinglyLinkedEntryWrap<T>* next;
    public:
    SinglyLinkedEntryWrap (const T& _o) : o(_o),next(0) {
       
    }
    ~SinglyLinkedEntryWrap() {
       
    }
    T& GetEntry() {
       return o;
    }
    friend class SinglyLinkedListWrap<T>;
  };
template <class T>
class SinglyLinkedListWrap  
  {
    ;;
    ;
    struct SinglyLinkedListWrap_synobj{
      unsigned count;SinglyLinkedEntryWrap<T>* end;SinglyLinkedEntryWrap<T>* head;
      struct ModifyLog
      {
        SinglyLinkedEntryWrap<T>** m_end;
        SinglyLinkedEntryWrap<T>*  m_end_old;
        SinglyLinkedEntryWrap<T>*  m_end_new;
      };
      std::atomic<std::vector<struct ModifyLog> *> modlog;
      std::vector<struct ModifyLog> * old_modlog;
      
      SinglyLinkedListWrap_synobj() : modlog(0) {
        old_modlog = new std::vector<struct ModifyLog>;
      }
      void insert_mod(SinglyLinkedEntryWrap<T>** m_end, SinglyLinkedEntryWrap<T>* m_end_old, SinglyLinkedEntryWrap<T>* m_end_new)
      {
        struct ModifyLog tmp;
        tmp.m_end = m_end;
        tmp.m_end_new = m_end_new;
        tmp.m_end_old = m_end_old;
        std::vector<struct ModifyLog> * cur = modlog.load();
        cur->push_back(tmp);
      }
      void reclaim_wrapper () {}
      void apply_mod ()
      {
        std::vector<struct ModifyLog> * cur = modlog.load();
        if (cur == 0) return;
        for (typename std::vector<struct ModifyLog>::iterator p = cur->begin();
             p != cur->end(); p++) {
          struct ModifyLog tmp = (*p);
          std::atomic<SinglyLinkedEntryWrap<T>*>* tmp_atomic = reinterpret_cast<std::atomic<SinglyLinkedEntryWrap<T>*>*>(tmp.m_end);
          std::atomic_compare_exchange_weak(tmp_atomic, &tmp.m_end_old, tmp.m_end_new);
        }
        if(modlog.compare_exchange_weak(cur, 0)) {
            old_modlog = cur;
        }
      }
      
      ;
      SinglyLinkedListWrap_synobj& operator =(SinglyLinkedListWrap_synobj& that)
      {
        that.apply_mod();
          count=that.count;
          end=that.end;
          head=that.head;
        if (modlog.load()!=0) {
          modlog.load()->clear();
        } else {
          old_modlog->clear();
          modlog = old_modlog;
          old_modlog = 0;
        }
        return *this;
      }
    };
    std::atomic <struct SinglyLinkedListWrap_synobj*> state;
    ;
    std::atomic<int> thread_count;
    std::queue<struct SinglyLinkedListWrap_synobj *> *synobj_lists[1000];
    std::atomic<pthread_t> synobj_list_ids[1000];
    std::atomic<struct SinglyLinkedListWrap_synobj *> occupied_synobj_array[1000];
    int local_idx_array[1000];
    inline bool is_synobj_free(struct SinglyLinkedListWrap_synobj *target_synobj) {
        bool res = true;
        int cur_thread_count = thread_count.load();
        for (int i = 0; i < cur_thread_count; i++) {
            if (target_synobj == occupied_synobj_array[i].load()) {
                res = false;
                break;
            }
        }
        return res;
    }
    inline int find_synobj_list_id() {
        pthread_t mytid = pthread_self();
        pthread_t null_tid = 0;
        int synobj_list_id = -1;
        int local_idx = -1;
        std::queue<struct SinglyLinkedListWrap_synobj *> *synobj_list;
        int mytid_mod = mytid%1000;
        for (int i = mytid_mod; i != (mytid_mod - 1 + 1000)%1000; i = (i + 1)%1000) {
            if (synobj_list_ids[i] == mytid) {
                synobj_list_id = i;
                break;
            }
        }
        if (synobj_list_id == -1) {
            synobj_list = new std::queue<struct SinglyLinkedListWrap_synobj *>;
            struct SinglyLinkedListWrap_synobj *new_synobj = new struct SinglyLinkedListWrap_synobj();
            synobj_list->push(new_synobj);
            for (int i = mytid_mod; i != (mytid_mod - 1 + 1000); i = (i+1)%1000) {
                null_tid = 0;
                if (synobj_list_ids[i].compare_exchange_strong(null_tid, mytid)) {
                    local_idx = thread_count.fetch_add(1);
                    synobj_list_id = i;
                    synobj_lists[i] = synobj_list;
                    local_idx_array[i] = local_idx;
                    break;
                }
            }
            if (synobj_list_id == -1) {
                printf("Failed to allocate synobj list\n");
            }
        }
        return synobj_list_id;
    }
    public:
    public:
    SinglyLinkedListWrap ()  {
       struct SinglyLinkedListWrap_synobj* state_tmp=new SinglyLinkedListWrap_synobj ();
       state_tmp->head = 0;
       state_tmp->end = 0;
       state_tmp->count = 0;
       
       state = state_tmp;
       thread_count = 0;
       for (int i = 0; i < 1000; i++) {
           synobj_lists[i] = 0;
           synobj_list_ids[i] = 0;
           occupied_synobj_array[i] = 0;
           local_idx_array[i] = 0;
       }
    }
    public:
    SinglyLinkedListWrap (const SinglyLinkedListWrap<T>& that)  {
       struct SinglyLinkedListWrap_synobj* state_tmp=new SinglyLinkedListWrap_synobj ();
       state_tmp->head = state_tmp->end = 0;
       state_tmp->count = 0;
       *this+=that;
       state = state_tmp;
       thread_count = 0;
       for (int i = 0; i < 1000; i++) {
           synobj_lists[i] = 0;
           synobj_list_ids[i] = 0;
           occupied_synobj_array[i] = 0;
           local_idx_array[i] = 0;
       }
    }
    ~SinglyLinkedListWrap() {
       DeleteAll();
    }
    void Reverse() {
       struct SinglyLinkedListWrap_synobj* oldstate;
       struct SinglyLinkedListWrap_synobj* newstate;
       int __ret__3=0;
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct SinglyLinkedListWrap_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct SinglyLinkedListWrap_synobj();
       }
       newstate->reclaim_wrapper();
       while (true) 
       {
        try{
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         SinglyLinkedEntryWrap<T>* tmp_copy=0;
         SinglyLinkedEntryWrap<T>* newstate_head_copy=0;
         SinglyLinkedEntryWrap<T>* tmp_next_copy=0;
         SinglyLinkedEntryWrap<T>* tmp1_copy=0;
         if (newstate->count==0) 
           {
              __ret__3 = 1;
           }
         if (__ret__3!=1) 
           {
              newstate_head_copy = new SinglyLinkedEntryWrap<T> (*newstate->head);
              SinglyLinkedEntryWrap<T>* tmp=newstate->head;
              tmp_copy = newstate_head_copy;
              tmp_next_copy = new SinglyLinkedEntryWrap<T> (*tmp->next);
              if(!tmp) throw "NullPtrExcpt";
              SinglyLinkedEntryWrap<T>* tmp1=tmp->next;
              tmp1_copy = tmp_next_copy;
              while (tmp!=newstate->end)
                {
                   
                   SinglyLinkedEntryWrap<T>* tmp2=tmp_copy;
                   
                   tmp = tmp1;
                   tmp_copy = tmp1_copy;
                   tmp_next_copy = new SinglyLinkedEntryWrap<T> (*tmp->next);
                   tmp1 = tmp->next;
                   tmp1_copy = tmp_next_copy;
                   if(!tmp_copy) throw "NullPtrExcpt";
                   tmp_copy->next = tmp2;
                }
              if(!newstate_head_copy) throw "NullPtrExcpt";
              newstate_head_copy->next = 0;
              newstate->end = newstate_head_copy;
              
              newstate->head = tmp_copy;
           }
         if (state.compare_exchange_strong(oldstate,newstate))
         {
          newstate->apply_mod();
          occupied_synobj_array[local_idx] = newstate;
          synobj_list->push(newstate);
          break;
         }
        } catch(...){}
       }
       return ;
    }
    SinglyLinkedEntryWrap<T>* AppendLast(const T& o) {
       struct SinglyLinkedListWrap_synobj* oldstate;
       struct SinglyLinkedListWrap_synobj* newstate;
       SinglyLinkedEntryWrap<T>* e=new SinglyLinkedEntryWrap<T> (o);
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct SinglyLinkedListWrap_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct SinglyLinkedListWrap_synobj();
       }
       newstate->reclaim_wrapper();
       while (true) 
       {
        try{
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         SinglyLinkedEntryWrap<T>* newstate_end_next_copy=0;
         ++newstate->count;
         if (newstate->end==0) 
           {
              newstate->head = newstate->end = e;
           }
         else 
           {
              newstate_end_next_copy = e;
              SinglyLinkedEntryWrap<T>* tmp_pointer_0=newstate->end;
              if(!tmp_pointer_0) throw "NullPtrExcpt";
              newstate->insert_mod(&(tmp_pointer_0->next),tmp_pointer_0->next,newstate_end_next_copy);
              newstate->end = e;
           }
         if (state.compare_exchange_strong(oldstate,newstate))
         {
          newstate->apply_mod();
          occupied_synobj_array[local_idx] = newstate;
          synobj_list->push(newstate);
          break;
         }
        } catch(...){}
       }
       return e;
    }
    SinglyLinkedEntryWrap<T>* PushFirst(const T& o) {
       struct SinglyLinkedListWrap_synobj* oldstate;
       struct SinglyLinkedListWrap_synobj* newstate;
       SinglyLinkedEntryWrap<T>* e=new SinglyLinkedEntryWrap<T> (o);
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct SinglyLinkedListWrap_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct SinglyLinkedListWrap_synobj();
       }
       newstate->reclaim_wrapper();
       while (true) 
       {
        try{
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         ++newstate->count;
         if (newstate->head==0) 
           {
              newstate->head = newstate->end = e;
           }
         else 
           {
              if(!e) throw "NullPtrExcpt";
              e->next = newstate->head;
              newstate->head = e;
           }
         if (state.compare_exchange_strong(oldstate,newstate))
         {
          newstate->apply_mod();
          occupied_synobj_array[local_idx] = newstate;
          synobj_list->push(newstate);
          break;
         }
        } catch(...){}
       }
       return e;
    }
    void PopFirst() {
       struct SinglyLinkedListWrap_synobj* oldstate;
       struct SinglyLinkedListWrap_synobj* newstate;
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct SinglyLinkedListWrap_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct SinglyLinkedListWrap_synobj();
       }
       newstate->reclaim_wrapper();
       while (true) 
       {
        try{
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         if (newstate->count>0) 
           {
              --newstate->count;
              SinglyLinkedEntryWrap<T>* e=newstate->head;
              if (newstate->head==newstate->end) 
                {
                   newstate->head = newstate->end = 0;
                }
              else 
                {
                   SinglyLinkedEntryWrap<T>* tmp_pointer_1=newstate->head;
                   if(!tmp_pointer_1) throw "NullPtrExcpt";
                   newstate->head = tmp_pointer_1->next;
                }
              
           }
         if (state.compare_exchange_strong(oldstate,newstate))
         {
          newstate->apply_mod();
          occupied_synobj_array[local_idx] = newstate;
          synobj_list->push(newstate);
          break;
         }
        } catch(...){}
       }
    }
    void DeleteAll() {
       struct SinglyLinkedListWrap_synobj* oldstate;
       struct SinglyLinkedListWrap_synobj* newstate;
       int synobj_list_id = find_synobj_list_id();
       std::queue<struct SinglyLinkedListWrap_synobj *> *synobj_list = synobj_lists[synobj_list_id];
       int local_idx = local_idx_array[synobj_list_id];
       
       newstate = synobj_list->front();
       if (is_synobj_free(newstate)) {
           synobj_list->pop();
       } else {
           newstate = new struct SinglyLinkedListWrap_synobj();
       }
       newstate->reclaim_wrapper();
       while (true) 
       {
        try{
         occupied_synobj_array[local_idx] = state.load();
         while (occupied_synobj_array[local_idx].load() != state.load()) {
             occupied_synobj_array[local_idx] = state.load();
         }
         oldstate=occupied_synobj_array[local_idx].load();
         
         *newstate = *oldstate;
         while (newstate->head!=0)
           {
              if (newstate->count>0) 
                {
                   --newstate->count;
                   SinglyLinkedEntryWrap<T>* e=newstate->head;
                   if (newstate->head==newstate->end) 
                     {
                        newstate->head = newstate->end = 0;
                     }
                   else 
                     {
                        SinglyLinkedEntryWrap<T>* tmp_pointer_2=newstate->head;
                        if(!tmp_pointer_2) throw "NullPtrExcpt";
                        newstate->head = tmp_pointer_2->next;
                     }
                   
                }
           }
         if (state.compare_exchange_strong(oldstate,newstate))
         {
          newstate->apply_mod();
          occupied_synobj_array[local_idx] = newstate;
          synobj_list->push(newstate);
          break;
         }
        } catch(...){}
       }
    }
    unsigned size() const{
       struct SinglyLinkedListWrap_synobj* __res;
       unsigned __ret__9=(unsigned)(-1);
       while(true)
       {
        try {
         __res=state.load();
         __ret__9 = __res->count;
         break;
        } catch(...){}
       }
       return __ret__9;
    }
    
    
    SinglyLinkedEntryWrap<T>* Next(SinglyLinkedEntryWrap<T>* cur) const{
       return cur->next;
    }
    class Iterator  
      {
        const SinglyLinkedListWrap<T>* list;
        SinglyLinkedEntryWrap<T>* cur;
        public:
        public:
        Iterator (const SinglyLinkedListWrap<T>& l) : list(&l) {
           cur = l.First();
        }
        public:
        Iterator (const Iterator& that) : list(that.list),cur(that.cur) {
           
        }
        Iterator& operator =(const Iterator& that) {
           list = that.list;
           cur = that.cur;
        }
        public:
        Iterator () : list(0),cur(0) {
           
        }
        T& Current() const{
           return (cur->GetEntry)();
        }
        T& operator *() const{
           return Current();
        }
        bool ReachEnd() const{
           return cur==0;
        }
        void Reset() {
           if (list!=0) 
             {
                cur = (list->First)();
             }
        }
        void Advance() {
           if (cur!=0) 
             {
                cur = (list->Next)(cur);
             }
        }
        void operator ++() {
           Advance();
        }
        void operator ++(int) {
           Advance();
        }
      };
  };
#endif
