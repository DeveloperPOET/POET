#include "TATAS.h"
#include <vector>
#include <queue>
#include <cstring>

#include <string>
template <typename T>
class RingBuffer  
  {
    struct RingBuffer_synobj{
      size_t tail;size_t head;
      ;void insert_mod(T** m_data, T* m_data_old, T m_data_new)
      {
        struct ModifyLog tmp;
        tmp.m_data = m_data;
        tmp.m_data_new = m_data_new;
        tmp.m_data_old = m_data_old;
        std::vector<struct ModifyLog> * cur = modlog.load();
        cur->push_back(tmp);
      }
      void insert_mod(T** m_data, T* m_data_old, T m_data_new, std::unordered_map<T**,T>*private_table)
      {
        struct ModifyLog tmp;
        tmp.m_data = m_data;
        tmp.m_data_new = m_data_new;
        tmp.m_data_old = m_data_old;
        (*private_table)[m_data] = m_data_new;
        std::vector<struct ModifyLog> * cur = modlog.load();
        cur->push_back(tmp);
      }
      ;
      ;
    };
    std::atomic <struct RingBuffer_synobj*> state;
    inline T read_wrapper(T* &param, std::unordered_map<T**,T>* private_table)
    {
        typename std::unordered_map<T**,T>::iterator res = private_table->find(&param);
        if (res != private_table->end()) return res->second;
        return (param?(*param):0);
    }
    inline T read_wrapper(T* param)
    {
        return (param?(*param):0);
    }
    inline T& write_wrapper(T* &param)
    {
        if (!param) {
            param = new T (0);
        }
        return *param;
    }
    ;
    public:
    public:
    RingBuffer (int capacity) : capacity_(capacity) {
       struct RingBuffer_synobj* state_tmp=new RingBuffer_synobj ();
       state_tmp->head = 0;
       state_tmp->tail = 0;
       data = new T* [capacity_];
       std::memset(data,0,capacity_*sizeof(T*));
       state = state_tmp;
       thread_count = 0;
       for (int i = 0; i < 1000; i++) {
           synobj_lists[i] = 0;
           synobj_list_ids[i] = 0;
           occupied_synobj_array[i] = 0;
           local_idx_array[i] = 0;
       }
    }
    ;
    bool push(T v) ;
    bool pop(T& v) ;
    bool isFull() ;
    bool isEmpty() ;
    std::string toString() {
       struct RingBuffer_synobj* __res;
       while(true)
       {
        try {
         __res=state.load();
         return "Capacity: "+std::to_string(capacity_)+"\n"+"Index: "+std::to_string(__res->tail-__res->head);
         break;
        } catch(...){}
       }
    }
    unsigned size() {
       struct RingBuffer_synobj* __res;
       int __ret__10=0;
       while(true)
       {
        try {
         __res=state.load();
         __ret__10 = __res->tail-__res->head;
         break;
        } catch(...){}
       }
       return __ret__10;
    }
    private:
    T* data;
    const size_t capacity_;
    ;
    ;
  };
template <typename T>
bool RingBuffer<T>::push(T item) {
   struct RingBuffer_synobj* oldstate;
   struct RingBuffer_synobj* newstate;
   int __ret__1=-1;
   int synobj_list_id = find_synobj_list_id();
   std::queue<struct RingBuffer_synobj *> *synobj_list = synobj_lists[synobj_list_id];
   int local_idx = local_idx_array[synobj_list_id];
   
   newstate = synobj_list->front();
   if (is_synobj_free(newstate)) {
       synobj_list->pop();
   } else {
       newstate = new struct RingBuffer_synobj();
   }
   newstate->reclaim_wrapper();
   std::unordered_map<T**,T> private_table;
   while (true) 
   {
    try{
     private_table.clear();
     occupied_synobj_array[local_idx] = state.load();
     while (occupied_synobj_array[local_idx].load() != state.load()) {
         occupied_synobj_array[local_idx] = state.load();
     }
     oldstate=occupied_synobj_array[local_idx].load();
     
     *newstate = *oldstate;
     T data_index_copy=0;
     if (newstate->tail-newstate->head>=capacity_)
       {
          __ret__1 = false;
       }
     if (__ret__1!=false)
       {
          int index=newstate->tail++;
          data_index_copy = item;
          newstate->insert_mod(&(data[index%capacity_]),data[index%capacity_],data_index_copy,&private_table);
          __ret__1 = true;
       }
     ;
    } catch(...){}
   }
   return __ret__1;
}
template <class T>
bool RingBuffer<T>::pop(T& result) {
   struct RingBuffer_synobj* oldstate;
   struct RingBuffer_synobj* newstate;
   int __ret__2=-1;
   int synobj_list_id = find_synobj_list_id();
   std::queue<struct RingBuffer_synobj *> *synobj_list = synobj_lists[synobj_list_id];
   int local_idx = local_idx_array[synobj_list_id];
   
   newstate = synobj_list->front();
   if (is_synobj_free(newstate)) {
       synobj_list->pop();
   } else {
       newstate = new struct RingBuffer_synobj();
   }
   newstate->reclaim_wrapper();
   std::unordered_map<T**,T> private_table;
   while (true) 
   {
    try{
     private_table.clear();
     occupied_synobj_array[local_idx] = state.load();
     while (occupied_synobj_array[local_idx].load() != state.load()) {
         occupied_synobj_array[local_idx] = state.load();
     }
     oldstate=occupied_synobj_array[local_idx].load();
     
     *newstate = *oldstate;
     if (newstate->tail<=newstate->head)
       {
          __ret__2 = false;
       }
     if (__ret__2!=false)
       {
          result = read_wrapper(data[newstate->head%capacity_], &private_table);
          newstate->head++;
          __ret__2 = true;
       }
     ;
    } catch(...){}
   }
   return __ret__2;
}
template <class T>
bool RingBuffer<T>::isFull() {
   struct RingBuffer_synobj* __res;
   bool __ret__4=-1;
   while(true)
   {
    try {
     __res=state.load();
     __ret__4 = __res->tail-__res->head>=capacity_;
     break;
    } catch(...){}
   }
   return __ret__4;
}
template <class T>
bool RingBuffer<T>::isEmpty() {
   struct RingBuffer_synobj* __res;
   bool __ret__6=-1;
   while(true)
   {
    try {
     __res=state.load();
     __ret__6 = __res->tail<=__res->head;
     break;
    } catch(...){}
   }
   return __ret__6;
}
