#include "TATAS.h"
#include <vector>
#include <queue>
#include <cstring>

#include <pthread.h>
#include <stdlib.h>
#include <utility>
template <class key_type>
class hash_set  
  {
    struct hash_entry{
      hash_entry* next;
      key_type key;
    };
    hash_entry** table;
    size_t hash_length;
    public:
    bool search(int k) {
       bool ret=-1;
       hash_entry* p=(hash_entry*)(-1);
       {
         AcquireLock acq(lock1);
       
       ret = false;
       p = table[k%hash_length];
       while (p)
         {
            if (p->key==k) 
              {
                 ret = true;
                 break;
              }
            else if (p->key>k) 
              {
                 ret = false;
                 break;
              }
            p = p->next;
         }
        }
       return ret;
    }
    bool insert(int k) {
       hash_entry* new_p=new hash_entry ();
       bool ret=-1;
       hash_entry* p=(hash_entry*)(-1);
       hash_entry* p_prev=(hash_entry*)(-1);
       {
         AcquireLock acq(lock1);
       
       ret = true;
       p = table[k%hash_length];
       p_prev = 0;
       while (p)
         {
            if (p->key==k) 
              {
                 ret = false;
                 break;
              }
            else if (p->key>k) 
              {
                 ret = true;
                 break;
              }
            p_prev = p;
            p = p->next;
         }
       if (ret) 
         {
            new_p->key = k;
            new_p->next = p;
            if (p_prev==0) 
              {
                 table[k%hash_length] = new_p;
              }
            else 
              {
                 p_prev->next = new_p;
              }
         }
        }
       return ret;
    }
    bool erase(int k) {
       bool ret=-1;
       hash_entry* curr=(hash_entry*)(-1);
       hash_entry* prev=(hash_entry*)(-1);
       {
         AcquireLock acq(lock1);
       
       ret = false;
       curr = table[k%hash_length];
       prev = 0;
       while (curr)
         {
            if (curr->key==k) 
              {
                 ret = true;
                 break;
              }
            else if (curr->key>k) 
              {
                 ret = false;
                 break;
              }
            prev = curr;
            curr = curr->next;
         }
       if (ret) 
         {
            if (prev==0) 
              {
                 table[k%hash_length] = curr->next;
              }
            else 
              {
                 prev->next = curr->next;
              }
         }
        }
       return ret;
    }
    public:
    hash_set (int init_hash_length)  {
       hash_length = init_hash_length;
       table = (hash_entry**)calloc(init_hash_length,sizeof(hash_entry*));
       if (table==NULL) 
         {
            printf("ERROR: hash_set calloc failure \n");
            exit(0);
         }
    }
    ;
    ~hash_set() {
       free(table);
    }
    ;
    private:
    mutable TATAS lock1;
  };
