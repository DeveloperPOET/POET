#include "TATAS.h"
#include <vector>
#include <queue>
#include <cstring>

#include <string>
template <typename T>
class RingBuffer  
  {
    public:
    public:
    RingBuffer (int capacity) : capacity_(capacity) {
       head = 0;
       tail = 0;
       data = new T [capacity_];
    }
    ;
    bool push(T v) ;
    bool pop(T& v) ;
    bool isFull() ;
    bool isEmpty() ;
    unsigned size() {
       int __ret__11;
       
       {
         AcquireLock acq(lock1);
       
       __ret__11 = tail-head;
        }
       return __ret__11;
    }
    private:
    T* data;
    const size_t capacity_;
    size_t head;
    size_t tail;
    private:
    mutable TATAS lock1;
  };
template <typename T>
bool RingBuffer<T>::push(T item) {
   bool ret;
   
   {
     AcquireLock acq(lock1);
   
   if (tail-head>=capacity_) 
     {
        ret = false;
     }
   else 
     {
        int index=tail;
        tail = tail+1;
        data[index%capacity_] = item;
        ret = true;
     }
    }
   return ret;
}
template <class T>
bool RingBuffer<T>::pop(T& result) {
   bool ret;
   
   {
     AcquireLock acq(lock1);
   
   if (tail<=head) 
     {
        ret = false;
     }
   else 
     {
        result = data[head%capacity_];
        head = head+1;
        ret = true;
     }
    }
   return ret;
}
template <class T>
bool RingBuffer<T>::isFull() {
   bool __ret__5;
   
   {
     AcquireLock acq(lock1);
   
   __ret__5 = tail-head>=capacity_;
    }
   return __ret__5;
}
template <class T>
bool RingBuffer<T>::isEmpty() {
   bool __ret__8;
   
   {
     AcquireLock acq(lock1);
   
   __ret__8 = tail<=head;
    }
   return __ret__8;
}
