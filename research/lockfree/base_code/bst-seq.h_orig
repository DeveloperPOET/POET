template <typename T> class BST;



template <typename T>
class BST {
 public:

  struct Node {
    Node *left;
    Node *right;
    Node *parent;
    T value;
  };

  BST() {
    root = new Node (-1);
  };

  bool insert(T newItem) {
   Node *newNode = new Node(newItem);

   Node* curr = 0;
   Node* newNodeParent = 0;
   Node* root_node = 0;
   bool ret = true;

   root_node = root;
   Node* tmp_var_0;
   curr = root_node->right;

   while (curr) {
      newNodeParent = curr;
      if (curr->value == newItem) {
        ret = false;
        break;
      } else if (newItem < curr->value) {
        curr = curr->left;
      } else {
        curr = curr->right;
      }
   }

   if (ret) {
      newNode->parent = newNodeParent;
      if (newNodeParent == 0) {
        root->right = newNode;
      } else {
        if (newItem < newNodeParent->value) {
          newNodeParent->left = newNode;
        } else {
          newNodeParent->right = newNode;
        }
      }
   }
   return ret;
}

  bool remove(T &t) {
   bool ret = false;
   Node* nodeToRemove = 0;

   Node* root_node = root;
   nodeToRemove = root_node->right;
   while (nodeToRemove!=0) {
     if (t==nodeToRemove->value) {
       ret = true;
       break;
     } else {
       if (t<nodeToRemove->value) {
         nodeToRemove = nodeToRemove->left;
       } else {
         nodeToRemove = nodeToRemove->right;
       }
     }
   }

   if (ret) {
        if (nodeToRemove->left==0) {
            Node* u=nodeToRemove;
            Node* v=nodeToRemove->right;
            if (u->parent==0) {
                root->right = v;
            } else {
                if (u==u->parent->left) {
                    u->parent->left = v;
                } else {
                    u->parent->right = v;
                }
            }
            if (v!=0) {
                v->parent = u->parent;
            }
        } else {
            if (nodeToRemove->right==0) {
                Node* u=nodeToRemove;
                Node* v=nodeToRemove->left;
                if (u->parent==0) {
                    root->right = v;
                } else {
                    if (u==u->parent->left) {
                        u->parent->left = v;
                    } else {
                        u->parent->right = v;
                    }
                }
                if (v!=0) {
                    v->parent = u->parent;
                }
            } else {
                Node* successor=0;
                {
                    Node* rootNode=nodeToRemove->right;
                    Node* current=rootNode;
                    while (current->left!=0) {
                        current = current->left;
                    }
                    successor = current;
                }
                if (successor->parent!=nodeToRemove) {
                  {
                    Node* u=successor;
                    Node* v=successor->right;
                    if (u->parent==0) {
                        root->right = v;
                    } else {
                        if (u==u->parent->left) {
                            u->parent->left = v;
                        } else {
                            u->parent->right = v;
                        }
                    }
                    if (v!=0) {
                        v->parent = u->parent;
                    }
                  }
                  successor->right = nodeToRemove->right;
                  successor->right->parent = successor;
                }
                {
                  Node* u=nodeToRemove;
                  Node* v=successor;
                  if (u->parent==0) {
                    root->right = v;
                  } else {
                    if (u==u->parent->left) {
                        u->parent->left = v;
                    } else {
                        u->parent->right = v;
                    }
                  }
                  if (v!=0) {
                    v->parent = u->parent;
                  }
                }
                successor->left = nodeToRemove->left;
                successor->left->parent = successor;
            }
        }
   }
   return ret;
}

  bool contains(T &v){

   Node* curr;
   Node* root_node;
   bool ret;

   curr = 0;
   root_node = 0;
   ret = false;

   root_node = root;
   curr = root->right;

   while (curr) {
    if (curr->value == v) {
        ret = true;
        break;
    } else if (v < curr->value) {
        curr = curr->left;
    } else {
        curr = curr->right;
    }
   }
   return ret;
}


 private:
  Node *root;
};

